function e(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}let t;const i=new class{get all(){if(t)return t;t={};for(let[e,n]of Object.entries(i))"all"!==e&&Object.assign(t,n);return t}},n={},s={};var r="undefined"!=typeof Buffer,a="undefined"!=typeof navigator,o=a&&"undefined"==typeof HTMLImageElement,l=!("undefined"==typeof global||"undefined"==typeof process||!process.versions||!process.versions.node);function h(e){return 0===Object.keys(e).length}function u(e){let t=new Error(e);return delete t.stack,t}const c=["chunked","firstChunkSize","firstChunkSizeNode","firstChunkSizeBrowser","chunkSize","chunkLimit"],f=["jfif","xmp","icc","iptc"],d=["tiff",...f],p=["thumbnail","interop","gps","exif","ifd0"],g=[...d,...p],m=["makerNote","userComment"],S=["translateKeys","translateValues","reviveValues","multiSegment"],C=[...S,"mergeOutput","sanitize"];class y{get needed(){return this.enabled||this.deps.size>0}constructor(t,n,s,r){if(e(this,"enabled",!1),e(this,"skip",new Set),e(this,"pick",new Set),e(this,"deps",new Set),e(this,"translateKeys",!1),e(this,"translateValues",!1),e(this,"reviveValues",!1),this.key=t,this.enabled=n,this.applyInheritables(r),this.canBeFiltered=p.includes(t),this.canBeFiltered&&(this.dict=i[t],this.dictKeys=Object.keys(this.dict),this.dictValues=Object.values(this.dict)),void 0!==s)if(Array.isArray(s))this.enabled=!0,this.canBeFiltered&&s.length>0&&this.translateTagSet(s,this.pick);else if("object"==typeof s){if(this.enabled=!0,this.canBeFiltered){let{pick:e,skip:t}=s;e&&e.length>0&&this.translateTagSet(e,this.pick),t&&t.length>0&&this.translateTagSet(t,this.skip)}this.applyInheritables(s)}else{if(!0!==s&&!1!==s)throw u("Invalid options argument: ".concat(s));this.enabled=s}}applyInheritables(e){let t,i;for(t of S)i=e[t],void 0!==i&&(this[t]=i)}translateTagSet(e,t){let{dictKeys:i,dictValues:n}=this;for(let s of e)if("string"==typeof s){let e=n.indexOf(s);-1===e&&(e=i.indexOf(Number(s))),-1!==e&&t.add(Number(i[e]))}else t.add(s)}finalizeFilters(){!this.enabled&&this.deps.size>0?(this.enabled=!0,w(this.pick,this.deps)):this.enabled&&this.pick.size>0&&w(this.pick,this.deps)}}var I={jfif:!1,tiff:!0,xmp:!1,icc:!1,iptc:!1,ifd0:!0,exif:!0,gps:!0,interop:!1,thumbnail:!1,makerNote:!1,userComment:!1,multiSegment:!1,skip:[],pick:[],translateKeys:!0,translateValues:!0,reviveValues:!0,sanitize:!0,mergeOutput:!0,chunked:!0,firstChunkSize:void 0,firstChunkSizeNode:512,firstChunkSizeBrowser:65536,chunkSize:65536,chunkLimit:5},b=new Map;class P{static useCached(e){let t=b.get(e);return void 0!==t?t:(t=new this(e),b.set(e,t),t)}constructor(e){if(!0===e)this.setupFromTrue();else if(void 0===e)this.setupFromUndefined();else if(Array.isArray(e))this.setupFromArray(e);else{if("object"!=typeof e)throw u("Invalid options argument ".concat(e));this.setupFromObject(e)}void 0===this.firstChunkSize&&(this.firstChunkSize=a?this.firstChunkSizeBrowser:this.firstChunkSizeNode),this.mergeOutput&&(this.thumbnail.enabled=!1),this.filterNestedSegmentTags(),this.traverseTiffDependencyTree()}setupFromUndefined(){let e;for(e of c)this[e]=I[e];for(e of C)this[e]=I[e];for(e of m)this[e]=I[e];for(e of g)this[e]=new y(e,I[e],void 0,this)}setupFromTrue(){let e;for(e of c)this[e]=I[e];for(e of C)this[e]=I[e];for(e of m)this[e]=!0;for(e of g)this[e]=new y(e,!0,void 0,this)}setupFromArray(e){let t;for(t of c)this[t]=I[t];for(t of C)this[t]=I[t];for(t of m)this[t]=I[t];for(t of g)this[t]=new y(t,!1,void 0,this);this.setupGlobalFilters(e,void 0,p)}setupFromObject(e){let t;for(t of c)this[t]=k(e[t],I[t]);for(t of C)this[t]=k(e[t],I[t]);for(t of m)this[t]=k(e[t],I[t]);for(t of d)this[t]=new y(t,I[t],e[t],this);for(t of p)this[t]=new y(t,I[t],e[t],this.tiff);this.setupGlobalFilters(e.pick,e.skip,p,g),!0===e.tiff?this.batchEnableWithBool(p,!0):!1===e.tiff?this.batchEnableWithUserValue(p,e):Array.isArray(e.tiff)?this.setupGlobalFilters(e.tiff,void 0,p):"object"==typeof e.tiff&&this.setupGlobalFilters(e.tiff.pick,e.tiff.skip,p)}batchEnableWithBool(e,t){for(let i of e)this[i].enabled=t}batchEnableWithUserValue(e,t){for(let i of e){let e=t[i];this[i].enabled=!1!==e&&void 0!==e}}setupGlobalFilters(e,t,i,n=i){if(e&&e.length){for(let e of n)this[e].enabled=!1;let t=T(e,i);for(let[e,i]of t)w(this[e].pick,i),this[e].enabled=!0}else if(t&&t.length){let e=T(t,i);for(let[t,i]of e)w(this[t].skip,i)}}filterNestedSegmentTags(){let{ifd0:e,exif:t,xmp:i,iptc:n,icc:s}=this;this.makerNote?t.deps.add(37500):t.skip.add(37500),this.userComment?t.deps.add(37510):t.skip.add(37510),i.enabled||e.skip.add(700),n.enabled||e.skip.add(33723),s.enabled||e.skip.add(34675)}traverseTiffDependencyTree(){let{ifd0:e,exif:t,gps:i,interop:n}=this;n.needed&&(t.deps.add(40965),e.deps.add(40965)),t.needed&&e.deps.add(34665),i.needed&&e.deps.add(34853),this.tiff.enabled=p.some(e=>!0===this[e].enabled)||this.makerNote||this.userComment;for(let e of p)this[e].finalizeFilters()}get onlyTiff(){return!f.map(e=>this[e].enabled).some(e=>!0===e)&&this.tiff.enabled}}function T(e,t){let n,s,r,a,o,l,h=[];for(l of t){for(n in a=i[l],o=[],a)s=Number(n),r=a[n],(e.includes(s)||e.includes(r))&&o.push(s);o.length&&h.push([l,o])}return h}function k(e,t){return void 0!==e?e:void 0!==t?t:void 0}function w(e,t){for(let i of t)e.add(i)}e(P,"default",I);let D={ifd0:!1,exif:!1,gps:[1,2,3,4],interop:!1,thumbnail:!1,sanitize:!1,reviveValues:!0,translateKeys:!1,translateValues:!1,mergeOutput:!1};const A=new TextDecoder("utf-8");function O(e){return"string"!=typeof e?x(e):e}function x(e){return A.decode(e)}class M{static from(e,t){return e instanceof this&&e.le===t?e:new M(e,void 0,void 0,t)}constructor(e,t=0,i,n){if("boolean"==typeof n&&(this.le=n),Array.isArray(e)&&(e=new Uint8Array(e)),e instanceof ArrayBuffer){let n=new DataView(e,t,i);this._swapDataView(n)}else if(e instanceof Uint8Array||e instanceof DataView||e instanceof M){let{byteOffset:n,byteLength:s}=e;if(void 0===i&&(i=s-t),(t+=n)+i>n+s)throw u("Creating view outside of available memory in ArrayBuffer");let r=new DataView(e.buffer,t,i);this._swapDataView(r)}else{if("number"!=typeof e)throw u("Invalid input argument for BufferView: "+e);{let t=new DataView(new ArrayBuffer(e));this._swapDataView(t)}}}_swapArrayBuffer(e){let t=new DataView(e);this._swapDataView(t)}_swapBuffer(e){let t=new DataView(e.buffer,e.byteOffset,e.byteLength);this._swapDataView(t)}_swapDataView(e){this.dataView=e,this.buffer=this.dataView.buffer,this.byteOffset=this.dataView.byteOffset,this.byteLength=this.dataView.byteLength}_lengthToEnd(e){return this.byteLength-e}set(e,t,i=M){if(e instanceof DataView||e instanceof M?e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength):e instanceof ArrayBuffer&&(e=new Uint8Array(e)),!(e instanceof Uint8Array))throw u("BufferView.set(): Invalid data argument.");return this.toUint8().set(e,t),new i(this,t,e.byteLength)}subarray(e,t){return t=t||this._lengthToEnd(e),new M(this,e,t)}toUint8(){return new Uint8Array(this.buffer,this.byteOffset,this.byteLength)}getUint8Array(e,t){return new Uint8Array(this.buffer,this.byteOffset+e,t)}getString(e=0,t=this.byteLength){return x(new Uint8Array(this.buffer,this.byteOffset+e,t))}getUnicodeString(e=0,t=this.byteLength){const i=[];for(let n=0;n<t&&e+n<this.byteLength;n+=2)i.push(this.getUint16(e+n));return i.map(e=>String.fromCharCode(e)).join("")}getInt8(e){return this.dataView.getInt8(e)}getUint8(e){return this.dataView.getUint8(e)}getInt16(e,t=this.le){return this.dataView.getInt16(e,t)}getInt32(e,t=this.le){return this.dataView.getInt32(e,t)}getUint16(e,t=this.le){return this.dataView.getUint16(e,t)}getUint32(e,t=this.le){return this.dataView.getUint32(e,t)}getFloat32(e,t=this.le){return this.dataView.getFloat32(e,t)}getFloat64(e,t=this.le){return this.dataView.getFloat64(e,t)}getFloat(e,t=this.le){return this.dataView.getFloat32(e,t)}getDouble(e,t=this.le){return this.dataView.getFloat64(e,t)}getUint64(e){let t=this.getUint32(e),i=this.getUint32(e+4);return t<1048575?t<<32|i:void 0!==typeof BigInt?(console.warn("Using BigInt because box ".concat(kind," has length of type 64uint but JS can only handle 53b numbers.")),BigInt(t)<<BigInt(32)|BigInt(i)):void console.warn("Integrity broken. Box ".concat(kind," has length of type 64uint but JS can only handle 53b numbers."))}getUintBytes(e,t,i){switch(t){case 1:return this.getUint8(e,i);case 2:return this.getUint16(e,i);case 4:return this.getUint32(e,i);case 8:return this.getUint64(e,i)}}getUint(e,t,i){switch(t){case 8:return this.getUint8(e,i);case 16:return this.getUint16(e,i);case 32:return this.getUint32(e,i);case 64:return this.getUint64(e,i)}}toString(e){return this.dataView.toString(e,this.constructor.name)}ensureChunk(){}}class F extends Map{constructor(e){super(),this.kind=e}get(e,t){return this.has(e)||this.throwNotLoaded(),t&&(e in t||this.throwUnknown(),t[e].enabled||this.throwNotLoaded()),super.get(e)}throwUnknown(){throw u("Unknown ".concat(this.kind," '").concat(key,"'."))}throwNotLoaded(){throw u("".concat(this.kind," '").concat(key,"' was not loaded, try using full build of exifr."))}keyList(){return Array.from(this.keys())}}function R(e){let t=new F(e);return void 0===t.keyList&&(t.keyList=F.prototype.keyList),t}var v=R("file parser"),L=R("segment parser"),U=R("file reader");function E(e,t){if("string"==typeof e)return N(e,t);if(a&&!o&&e instanceof HTMLImageElement)return N(e.src,t);if(e instanceof Uint8Array||e instanceof ArrayBuffer||e instanceof DataView)return new M(e);if(a&&e instanceof Blob)return async function(e,t){return B(e,t,"blob",H)}(e,t);throw u("Invalid input argument")}function N(e,t){if(function(e){return e.startsWith("data:")||e.length>1e4}(e))return async function(e,t){return G(e,t,"base64")}(e,t);if(a)return async function(e,t){return B(e,t,"url",V)}(e,t);if(l)return async function(e,t){return G(e,t,"fs")}(e,t);throw u("Invalid input argument")}async function B(e,t,i,n){return U.has(i)?G(e,t,i):async function(e,t,i){let n=await i(e);return new DataView(n)}(e,0,n)}async function G(e,t,i){let n=new(U.get(i))(e,t);return await n.read(),n}async function V(e){return fetch(e).then(e=>e.arrayBuffer())}async function H(e){return new Promise((t,i)=>{let n=new FileReader;n.onloadend=()=>t(n.result||new ArrayBuffer),n.onerror=i,n.readAsArrayBuffer(e)})}class z{constructor(t){e(this,"parsers",{}),this.options=P.useCached(t)}setup(){if(this.fileParser)return;let e,t=this.file.getUint16(0);if(18761===t||19789===t)this.file.isTiff=!0,e=v.get("tiff");else if(65496===t)this.file.isJpeg=!0,e=v.get("jpeg");else{if(!function(e){let t=e.getUint32(0),i=16,n=[];for(;i<t;)n.push(e.getString(i,4)),i+=4;return n.includes("heic")}(this.file))throw u("Unknown file format");this.file.isHeic=!0,e=v.get("heic")}this.fileParser=new e(this.options,this.file,this.parsers)}async read(e){this.file=await E(e,this.options)}async parse(){this.setup(),await this.fileParser.parse();let e={},{mergeOutput:t}=this.options,i=Object.values(this.parsers).map(async i=>{let n=await i.parse();(t||i.constructor.mergeOutput)&&"string"!=typeof n?Object.assign(e,n):e[i.constructor.type]=n});var n;return await Promise.all(i),e=h(n=e)?void 0:n,this.file.close&&this.file.close(),e}async extractThumbnail(){this.setup();let e=L.get("tiff",this.options);var t;if(this.file.isTiff?t={start:0,type:"tiff"}:this.file.isJpeg&&(t=await this.fileParser.getOrFindSegment("tiff")),void 0===t)return;let i=await this.fileParser.ensureSegmentChunk(t),n=this.parsers.tiff=new e(i,this.options,this.file),s=await n.extractThumbnail();return this.file.close&&this.file.close(),s}}async function W(e,t){let i=new z(t);return await i.read(e),i.parse()}async function j(e,t={}){t.thumbnail=!0,t.mergeOutput=!0;let i=new z(t);await i.read(e);let n=await i.extractThumbnail();return n&&r?Buffer.from(n):n}async function K(...e){let t=await this.thumbnail(...e);if(void 0!==t){let e=new Blob([t.buffer]);return URL.createObjectURL(e)}}async function X(e){let t=new z(D);await t.read(e);let i=await t.parse(),{latitude:n,longitude:s}=i.gps;return{latitude:n,longitude:s}}class _{constructor(t,i,n){e(this,"ensureSegmentChunk",async e=>{let t=e.start,i=e.size||65536;if(this.file.chunked)if(this.file.available(t,i))e.chunk=this.file.subarray(t,i);else try{e.chunk=await this.file.readChunk(t,i)}catch(t){throw u("Couldn't read segment: ".concat(JSON.stringify(e),". ").concat(t.message))}else if(this.file.byteLength>t+i)e.chunk=this.file.subarray(t,i);else{if(void 0!==e.size)throw u("Segment unreachable: "+JSON.stringify(e));e.chunk=this.file.subarray(t)}return e.chunk}),this.extendOptions&&this.extendOptions(t),this.options=t,this.file=i,this.parsers=n}createParser(e,t){let i=new(L.get(e))(t,this.options,this.file);return this.parsers[e]=i}}class J{static findPosition(e,t){let i=e.getUint16(t+2)+2,n="function"==typeof this.headerLength?this.headerLength(e,t,i):this.headerLength,s=t+n,r=i-n;return{offset:t,length:i,start:s,size:r,end:s+r}}static parse(e,t,i){return"object"==typeof t&&(i=t,t=void 0),new this(new M(e,t),P.useCached(i)).parse()}constructor(e,t={},i){this.chunk=e,this.options=t,this.file=i;let n=this.constructor,s=t[n.type]||{},r=["translateKeys","translateValues","reviveValues"];for(let e of r)this[e]=Q(n[e],s[e],t[e]);this.canTranslate=this.translateKeys||this.translateValues||this.reviveValues}translate(){if(this.canTranslate){let e=this.constructor.type;this.output=this.translateBlock(this.output,e)}}translateBlock(e,t){let r=i[t],a=n[t],o=s[t],l=this.options[t];if(l.reviveValues&&o)for(let[t,i]of Object.entries(o))void 0!==e[t]&&e[t]&&(e[t]=i(e[t]));let h=Object.entries(e);return l.translateValues&&a&&(h=h.map(([e,t])=>[e,this.translateValue(t,a[e])||t])),l.translateKeys&&r&&(h=h.map(([e,t])=>[r[e]||e,t])),Object.fromEntries(h)}translateValue(e,t){return t&&t[e]}}e(J,"headerLength",4),e(J,"type",void 0),e(J,"mergeOutput",!1),e(J,"multiSegment",!1),e(J,"canHandle",()=>!1);const Y=e=>void 0!==e,Q=(...e)=>e.find(Y);function q(e){return 192===e||194===e||196===e||219===e||221===e||218===e||254===e}function Z(e){return e>=224&&e<=239}function $(e,t){for(let[i,n]of L)if(n.canHandle(e,t))return i}function ee(...e){let t=e[0].constructor,i=0;for(let t of e)i+=t.length;let n=new t(i),s=0;for(let t of e)n.set(t,s),s+=t.length;return n}function te(e){if("string"!=typeof e)return null;e=e.trim();var[t,i]=e.split(" "),[n,s,r]=t.split(":").map(Number),a=new Date(n,s-1,r);if(i){var[o,l,h]=i.split(":").map(Number);a.setHours(o),a.setMinutes(l),a.setSeconds(h)}return a}function ie(e,t,i,n){var s=e+t/60+i/3600;return"S"!=n&&"W"!=n||(s*=-1),s}v.set("jpeg",class extends _{constructor(...t){super(...t),e(this,"appSegments",[]),e(this,"jpgSegments",[]),e(this,"unknownSegments",[])}async parse(){await this.findAppSegments(),await this.readSegments(),this.createParsers()}async readSegments(){let e=this.appSegments.map(this.ensureSegmentChunk);await Promise.all(e)}setupSegmentFinderArgs(e){!0===e?(this.findAll=!0,this.wanted=new Set(L.keyList())):(e=void 0===e?L.keyList().filter(e=>this.options[e].enabled):e.filter(e=>this.options[e].enabled&&L.has(e)),this.findAll=!1,this.remaining=new Set(e),this.wanted=new Set(e)),this.unfinishedMultiSegment=!1}async findAppSegments(e=0,t){this.setupSegmentFinderArgs(t);let{file:i,findAll:n,wanted:s,remaining:r}=this;if(!n)for(let e of s){if(L.get(e).multiSegment){n=!0,await this.file.readWhole();break}}if(e=this._findAppSegments(e,i.byteLength,n,s,r),!this.options.onlyTiff&&i.chunked){let t=!1;for(;r.size>0&&!t&&(i.canReadNextChunk||this.unfinishedMultiSegment);){let{nextChunkOffset:n}=i,s=this.appSegments.some(e=>!this.file.available(e.offset||e.start,e.length||e.size));t=e>n&&!s?!await i.readNextChunk(e):!await i.readNextChunk(n),e=this._findAppSegments(e,i.byteLength)}}}_findAppSegments(e,t){let i,n,s,{file:r,findAll:a,wanted:o,remaining:l}=this;for(;e<t;e++){if(255!==r.getUint8(e))continue;if(i=r.getUint8(e+1),n=Z(i),s=q(i),!n&&!s)continue;let t=r.getUint16(e+2);if(n){let t=$(r,e);if(t&&o.has(t)){let i=L.get(t).findPosition(r,e),n=this.options[t];if(i.type=t,this.appSegments.push(i),!a&&(i.multiSegment&&n.multiSegment?i.chunkNumber<i.chunkCount?this.unfinishedMultiSegment=!0:(this.unfinishedMultiSegment=!1,l.delete(t)):l.delete(t),0===l.size))break}else{let t=J.findPosition(r,e);this.unknownSegments.push(t)}}else s&&this.jpgSegments.push({offset:e,length:t});e+=t+1}return e}async createParsers(){if(this.hasMultiSegments){var e=[];let t=[];for(let i of this.appSegments)if(i.multiSegment){if(t.includes(i.type))break;t.push(i.type);let n=ee(...this.appSegments.filter(e=>e.type===i.type).sort((e,t)=>e.chunkNumber-t.chunkNumber).map(e=>e.chunk.toUint8()));e.push({type:i.type,chunk:new M(n)})}else e.push(i)}else e=this.appSegments;for(let t of e){let{type:e,chunk:i}=t;if(!this.options[e].enabled)continue;let n=this.parsers[e];if(n&&n.append);else if(!n){let t=new(L.get(e,this.options))(i,this.options,this.file);this.parsers[e]=t}}}get hasMultiSegments(){return this.appSegments.some(e=>e.multiSegment)}getSegment(e){return this.appSegments.find(t=>t.type===e)}async getOrFindSegment(e){let t=this.getSegment(e);return void 0===t&&(await this.findAppSegments(0,[e]),t=this.getSegment(e)),t}}),s.ifd0=s.thumbnail={50827:O,306:te},s.exif={40960:O,36864:O,36867:te,36868:te},s.gps={0:e=>Array.from(e).join("."),7:e=>Array.from(e).join(":")};const ne={1:1,2:1,3:2,4:4,5:8,6:1,7:1,8:2,9:4,10:8,11:4,12:8,13:4};class se extends J{parseHeader(){var e=this.chunk.getUint16();if(18761===e)this.le=!0;else{if(19789!==e)throw u("Invalid EXIF data: expected byte order marker (0x4949 or 0x4D4D).");this.le=!1}if(this.chunk.le=this.le,42!==this.chunk.getUint16(2))throw u("Invalid EXIF data: expected 0x002A.");this.headerParsed=!0}parseTags(e,t){let{pick:i,skip:n}=this.options[t];i=new Set(i);let s=i.size>0,r=0===n.size,a=this.chunk.getUint16(e);e+=2;let o={};for(let t=0;t<a;t++){let t=this.chunk.getUint16(e);if(s){if(i.has(t)&&(o[t]=this.parseTag(e),i.delete(t),0===i.size))break}else!r&&n.has(t)||(o[t]=this.parseTag(e));e+=12}return o}parseTag(e){let t=this.chunk.getUint16(e+2),i=this.chunk.getUint32(e+4),n=ne[t];if(n*i<=4?e+=8:e=this.chunk.getUint32(e+8),e>this.chunk.byteLength)throw u("tiff value offset ".concat(e," is outside of chunk size ").concat(this.chunk.byteLength));if(2===t){let t=this.chunk.getString(e,i);for(;t.endsWith("\0");)t=t.slice(0,-1);return t}if(7===t)return this.chunk.getUint8Array(e,i);if(1===i)return this.parseTagValue(t,e);if(1===t)return this.chunk.getUint8Array(e,i);{let s=new(function(e){switch(e){case 1:return Uint8Array;case 3:return Uint16Array;case 4:return Uint32Array;case 5:return Array;case 6:return Int8Array;case 8:return Int16Array;case 9:return Int32Array;case 10:return Array;case 11:return Float32Array;case 12:return Float64Array;default:return Array}}(t))(i),r=n;for(let n=0;n<i;n++)s[n]=this.parseTagValue(t,e),e+=r;return s}}parseTagValue(e,t){switch(e){case 1:return this.chunk.getUint8(t);case 3:return this.chunk.getUint16(t);case 4:return this.chunk.getUint32(t);case 5:return this.chunk.getUint32(t)/this.chunk.getUint32(t+4);case 6:return this.chunk.getInt8(t);case 8:return this.chunk.getInt16(t);case 9:return this.chunk.getInt32(t);case 10:return this.chunk.getInt32(t)/this.chunk.getInt32(t+4);case 11:return this.chunk.getFloat(t);case 12:return this.chunk.getDouble(t);case 13:return this.chunk.getUint32(t);default:throw u("Invalid tiff type ".concat(e))}}}const re=["ifd0","thumbnail","exif","gps","interop"];class ae extends se{static canHandle(e,t){return 225===e.getUint8(t+1)&&1165519206===e.getUint32(t+4)&&0===e.getUint16(t+8)}async parse(){if(this.parseHeader(),this.options.ifd0.enabled&&await this.parseIfd0Block(),this.options.exif.enabled&&await this.parseExifBlock(),this.options.gps.enabled&&await this.parseGpsBlock(),this.options.interop.enabled&&await this.parseInteropBlock(),this.options.thumbnail.enabled&&await this.parseThumbnailBlock(),this.translate(),this.options.mergeOutput){let{ifd0:e,exif:t,gps:i,interop:n}=this;this.output=Object.assign({},e,t,i,n)}else{this.output={};for(let e of re){let t=this[e];t&&!h(t)&&(this.output[e]=t)}}return this.makerNote&&(this.output.makerNote=this.makerNote),this.userComment&&(this.output.userComment=this.userComment),this.output}findIfd0Offset(){void 0===this.ifd0Offset&&(this.ifd0Offset=this.chunk.getUint32(4))}findIfd1Offset(){if(void 0===this.ifd1Offset){this.findIfd0Offset();let e=this.chunk.getUint16(this.ifd0Offset),t=this.ifd0Offset+2+12*e;this.ifd1Offset=this.chunk.getUint32(t)}}get estimatedExifSize(){if(this.options.exif.enabled){let e=2048;return this.options.makerNote&&(e+=2048),this.options.userComment&&(e+=2048),e}return 0}get minimalEstimatedSize(){let e=this.estimatedExifSize;return this.options.ifd0.enabled&&(e+=1024),this.options.exif.enabled&&(e+=1024),this.options.gps.enabled&&(e+=512),this.options.interop.enabled&&(e+=100),this.options.thumbnail.enabled&&(e+=1024),this.file.isTiff&&(this.xmp&&(e+=3e4),this.iptc&&(e+=2e4),this.icc&&(e+=2e4)),e}async parseIfd0Block(){if(this.ifd0)return;if(this.findIfd0Offset(),this.ifd0Offset<8)throw u("Invalid EXIF data: IFD0 offset should be less than 8");if(!this.file.chunked&&this.ifd0Offset>this.file.byteLength)throw u("IFD0 offset points to outside of file.\nthis.ifd0Offset: ".concat(this.ifd0Offset,", file.byteLength: ").concat(this.file.byteLength));await this.ensureBlockChunk(this.ifd0Offset,this.minimalEstimatedSize);let e=this.ifd0=this.parseTags(this.ifd0Offset,"ifd0");return 0!==Object.keys(e).length?(this.exifOffset=e[34665],this.interopOffset=e[40965],this.gpsOffset=e[34853],this.xmp=e[700],this.iptc=e[33723],this.icc=e[34675],this.options.sanitize&&(delete e[34665],delete e[40965],delete e[34853],delete e[700],delete e[33723],delete e[34675]),e):void 0}async ensureBlockChunk(e,t){this.file.isTiff&&await this.file.ensureChunk(e,t),e>this.chunk.byteLength&&(this.chunk=M.from(this.file,this.le))}async parseExifBlock(){if(this.exif)return;if(this.ifd0||await this.parseIfd0Block(),void 0===this.exifOffset)return;await this.ensureBlockChunk(this.exifOffset,this.estimatedExifSize);let e=this.exif=this.parseTags(this.exifOffset,"exif");return this.interopOffset||(this.interopOffset=e[40965]),this.makerNote=e[37500],this.userComment=e[37510],this.options.sanitize&&(delete e[40965],delete e[37500],delete e[37510]),e[41729]&&1===e[41729].length&&(e[41729]=e[41729][0]),e}async parseGpsBlock(){if(this.gps)return;if(this.ifd0||await this.parseIfd0Block(),void 0===this.gpsOffset)return;let e=this.gps=this.parseTags(this.gpsOffset,"gps");return e&&e[2]&&e[4]&&(e.latitude=ie(...e[2],e[1]),e.longitude=ie(...e[4],e[3])),e}async parseInteropBlock(){if(!this.interop&&(this.ifd0||await this.parseIfd0Block(),void 0!==this.interopOffset||this.exif||this.parseExifBlock(),void 0!==this.interopOffset))return this.interop=this.parseTags(this.interopOffset,"interop")}parseThumbnailBlock(e=!1){if(!this.thumbnail&&!this.thumbnailParsed&&(!this.options.mergeOutput||e))return this.findIfd1Offset(),this.ifd1Offset>0&&(this.ifd1=this.parseTags(this.ifd1Offset,"thumbnail"),this.thumbnail=this.ifd1,this.thumbnailParsed=!0),this.thumbnail}extractThumbnail(){if(this.headerParsed||this.parseHeader(),this.thumbnailParsed||this.parseThumbnailBlock(!0),void 0===this.thumbnail)return;let e=this.thumbnail[513],t=this.thumbnail[514];return this.chunk.getUint8Array(e,t)}translate(){if(this.canTranslate)for(let e of re)e in this&&(this[e]=this.translateBlock(this[e],e))}}e(ae,"type","tiff"),e(ae,"mergeOutput",!0),e(ae,"headerLength",10),L.set("tiff",ae),i.ifd0=i.thumbnail={11:"ProcessingSoftware",254:"SubfileType",255:"OldSubfileType",256:"ImageWidth",257:"ImageHeight",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Thresholding",264:"CellWidth",265:"CellLength",266:"FillOrder",269:"DocumentName",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",285:"PageName",286:"XPosition",287:"YPosition",290:"GrayResponseUnit",296:"ResolutionUnit",297:"PageNumber",301:"TransferFunction",305:"Software",306:"ModifyDate",315:"Artist",316:"HostComputer",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",330:"SubIFD",332:"InkSet",337:"TargetPrinter",513:"ThumbnailOffset",514:"ThumbnailLength",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",700:"ApplicationNotes",18246:"Rating",18249:"RatingPercent",33432:"Copyright",33550:"PixelScale",33723:"IPTC",34264:"ModelTransform",34377:"PhotoshopSettings",34665:"ExifIFD",34675:"ICC",34853:"GpsIFD",40091:"XPTitle",40092:"XPComment",40093:"XPAuthor",40094:"XPKeywords",40095:"XPSubject",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50736:"DNGLensInfo",50739:"ShadowScale",50740:"DNGPrivateData",40965:"InteropIFD"},i.exif={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISO",34858:"TimeZoneOffset",34859:"SelfTimerMode",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"CreateDate",36873:"GooglePlusUploadCode",36880:"OffsetTime",36881:"OffsetTimeOriginal",36882:"OffsetTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureCompensation",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37393:"ImageNumber",37394:"SecurityClassification",37395:"ImageHistory",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubSecTime",37521:"SubSecTimeOriginal",37522:"SubSecTimeDigitized",37888:"AmbientTemperature",37889:"Humidity",37890:"Pressure",37891:"WaterDepth",37892:"Acceleration",37893:"CameraElevationAngle",40960:"FlashpixVersion",40961:"ColorSpace",40962:"ExifImageWidth",40963:"ExifImageHeight",40964:"RelatedSoundFile",41483:"FlashEnergy",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFormat",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"OwnerName",42033:"SerialNumber",42034:"LensInfo",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42080:"CompositeImage",42081:"CompositeImageCount",42082:"CompositeImageExposureTimes",42240:"Gamma",59932:"Padding",59933:"OffsetSchema",65e3:"OwnerName",65001:"SerialNumber",65002:"Lens",65100:"RawFile",65101:"Converter",65102:"WhiteBalance",65105:"Exposure",65106:"Shadows",65107:"Brightness",65108:"Contrast",65109:"Saturation",65110:"Sharpness",65111:"Smoothness",65112:"MoireFilter",40965:"InteropIFD"},i.gps={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"};let oe=n.ifd0=n.thumbnail={};oe[274]={1:"Horizontal (normal)",2:"Mirror horizontal",3:"Rotate 180",4:"Mirror vertical",5:"Mirror horizontal and rotate 270 CW",6:"Rotate 90 CW",7:"Mirror horizontal and rotate 90 CW",8:"Rotate 270 CW"},oe[296]={1:"None",2:"inches",3:"cm"};const le=n.exif={};le[34850]={0:"Not defined",1:"Manual",2:"Normal program",3:"Aperture priority",4:"Shutter priority",5:"Creative program",6:"Action program",7:"Portrait mode",8:"Landscape mode"},le[37121]={0:"-",1:"Y",2:"Cb",3:"Cr",4:"R",5:"G",6:"B"},le[37383]={0:"Unknown",1:"Average",2:"CenterWeightedAverage",3:"Spot",4:"MultiSpot",5:"Pattern",6:"Partial",255:"Other"},le[37384]={0:"Unknown",1:"Daylight",2:"Fluorescent",3:"Tungsten (incandescent light)",4:"Flash",9:"Fine weather",10:"Cloudy weather",11:"Shade",12:"Daylight fluorescent (D 5700 - 7100K)",13:"Day white fluorescent (N 4600 - 5400K)",14:"Cool white fluorescent (W 3900 - 4500K)",15:"White fluorescent (WW 3200 - 3700K)",17:"Standard light A",18:"Standard light B",19:"Standard light C",20:"D55",21:"D65",22:"D75",23:"D50",24:"ISO studio tungsten",255:"Other"},le[37385]={0:"Flash did not fire",1:"Flash fired",5:"Strobe return light not detected",7:"Strobe return light detected",9:"Flash fired, compulsory flash mode",13:"Flash fired, compulsory flash mode, return light not detected",15:"Flash fired, compulsory flash mode, return light detected",16:"Flash did not fire, compulsory flash mode",24:"Flash did not fire, auto mode",25:"Flash fired, auto mode",29:"Flash fired, auto mode, return light not detected",31:"Flash fired, auto mode, return light detected",32:"No flash function",65:"Flash fired, red-eye reduction mode",69:"Flash fired, red-eye reduction mode, return light not detected",71:"Flash fired, red-eye reduction mode, return light detected",73:"Flash fired, compulsory flash mode, red-eye reduction mode",77:"Flash fired, compulsory flash mode, red-eye reduction mode, return light not detected",79:"Flash fired, compulsory flash mode, red-eye reduction mode, return light detected",89:"Flash fired, auto mode, red-eye reduction mode",93:"Flash fired, auto mode, return light not detected, red-eye reduction mode",95:"Flash fired, auto mode, return light detected, red-eye reduction mode"},le[37392]=le[41488]={1:"No absolute unit of measurement",2:"Inch",3:"Centimeter"},le[41495]={1:"Not defined",2:"One-chip color area sensor",3:"Two-chip color area sensor",4:"Three-chip color area sensor",5:"Color sequential area sensor",7:"Trilinear sensor",8:"Color sequential linear sensor"},le[41728]={1:"Film Scanner",2:"Reflection Print Scanner",3:"Digital Camera"},le[41729]={1:"Directly photographed"},le[41985]={0:"Normal",1:"Custom",2:"HDR (no original saved)",3:"HDR (original saved)",4:"Original (for HDR)",6:"Panorama",7:"Portrait HDR",8:"Portrait"},le[41986]={0:"Auto",1:"Manual",2:"Auto bracket"},le[41987]={0:"Auto",1:"Manual"},le[41990]={0:"Standard",1:"Landscape",2:"Portrait",3:"Night",4:"Other"},le[41991]={0:"None",1:"Low gain up",2:"High gain up",3:"Low gain down",4:"High gain down"},le[41992]=le[41993]=le[41994]={0:"Normal",1:"Low",2:"High"},le[41996]={0:"Unknown",1:"Macro",2:"Close",3:"Distant"},le[42080]={0:"Unknown",1:"Not a Composite Image",2:"General Composite Image",3:"Composite Image Captured While Shooting"};class he extends M{constructor(...t){super(...t),e(this,"ranges",new ue),this.ranges.add(0,this.byteLength)}_tryExtend(e,t){let i=e+t;if(i>this.byteLength){let{dataView:e}=this._extend(i);this._swapDataView(e)}}_extend(e,t=!0){if(r&&t)var i=Buffer.allocUnsafe(e);else i=new Uint8Array(e);let n=new DataView(i.buffer,i.byteOffset,i.byteLength);return i.set(new Uint8Array(this.buffer,this.byteOffset,this.byteLength),0),{uintView:i,dataView:n}}append(e){if(e instanceof DataView||e instanceof M)e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength);else if(!e instanceof Uint8Array)throw u("Invalid chunk type to extend with");let{uintView:t,dataView:i}=this._extend(this.byteLength+e.byteLength);t.set(e,this.byteLength),this.ranges.add(this.byteLength,e.byteLength),this._swapDataView(i)}subarray(e,t,i=!1){return t=t||this._lengthToEnd(e),i&&this._tryExtend(e,t),this.ranges.add(e,t),super.subarray(e,t)}set(e,t,i=!1){i&&this._tryExtend(t,e.byteLength);let n=super.set(e,t);return this.ranges.add(t,n.byteLength),n}async ensureChunk(e,t){this.chunked&&(this.ranges.available(e,t)||await this.readChunk(e,t))}available(e,t){return this.ranges.available(e,t)}}class ue{constructor(t){e(this,"list",[]),void 0!==t&&Array.isArray(t)&&this.addMultiple(t)}addMultiple(e){if(Array.isArray(e[0]))for(let[t,i]of e)this.add(t,i);else for(let{offset:t,length:i}of e)this.add(t,i)}add(e,t,i=0){let n=e+t,s=this.list.filter(t=>ce(e,t.offset,n)||ce(e,t.end,n));if(s.length>0){e=Math.min(e,...s.map(e=>e.offset)),n=Math.max(n,...s.map(e=>e.end)),t=n-e;let i=s.shift();i.offset=e,i.length=t,i.end=n,this.list=this.list.filter(e=>!s.includes(e))}else this.list.push({offset:e,length:t,end:n})}available(e,t){let i=e+t;return this.list.some(t=>t.offset<=e&&i<=t.end)}}function ce(e,t,i){return e<=t&&t<=i}class fe extends he{constructor(t,i){super(0),e(this,"chunksRead",0),this.input=t,this.options=i}async readWhole(){this.chunked=!1,await this.readChunk(this.nextChunkOffset)}async readChunked(){this.chunked=!0,await this.readChunk(0,this.options.firstChunkSize)}async readNextChunk(e=this.nextChunkOffset){if(this.fullyRead)return this.chunksRead++,!1;let t=this.options.chunkSize,i=await this.readChunk(e,t);return!!i&&i.byteLength===t}async readChunk(e,t){if(this.chunksRead++,0!==(t=this.safeWrapAddress(e,t)))return this._readChunk(e,t)}safeWrapAddress(e,t){return void 0!==this.size&&e+t>this.size?Math.max(0,this.size-e):t}get nextChunkOffset(){let{offset:e,length:t}=this.ranges.list[0];return 0===e?Math.max(t):0}get canReadNextChunk(){return this.chunksRead<this.options.chunkLimit}get fullyRead(){return void 0!==this.size&&this.nextChunkOffset===this.size}read(){return this.options.chunked?this.readChunked():this.readWhole()}close(){}}if(l)if("function"==typeof require)var de=Promise.resolve(require("fs").promises);else de=import("fs").then(e=>e.promises);U.set("fs",class extends fe{async readWhole(){this.chunked=!1,this.fs=await de;let e=await this.fs.readFile(this.input);this._swapBuffer(e)}async readChunked(){this.chunked=!0,this.fs=await de,await this.open(),await this.readChunk(0,this.options.firstChunkSize)}async open(){void 0===this.fh&&(this.fh=await this.fs.open(this.input,"r"),this.size=(await this.fh.stat(this.input)).size)}async _readChunk(e,t){void 0===this.fh&&await this.open(),e+t>this.size&&(t=this.size-e);var i=this.subarray(e,t,!0);return await this.fh.read(i.dataView,0,t,e),i}async close(){if(this.fh){let e=this.fh;this.fh=void 0,await e.close()}}});U.set("base64",class extends fe{constructor(...e){super(...e),this.input=this.input.replace(/^data\:([^\;]+)\;base64,/gim,""),this.size=this.input.length/4*3,this.input.endsWith("==")?this.size-=2:this.input.endsWith("=")&&(this.size-=1)}async _readChunk(e,t){var i=this.input;if(void 0===e){e=0;var n=0,s=0}else s=e-(n=4*Math.floor(e/3))/4*3;void 0===t&&(t=this.size);let a=e+t;var o=n+4*Math.ceil(a/3);i=i.slice(n,o);let l=Math.min(t,this.size-e);if(r){let t=Buffer.from(i,"base64").slice(s,s+l);return this.set(t,e,!0)}{let t=this.subarray(e,l,!0),n=atob(i),r=t.toUint8();for(let e=0;e<l;e++)r[e]=n.charCodeAt(s+e);return t}}});U.set("url",class extends fe{async readWhole(){this.chunked=!1;let e=await V(this.input);this._swapArrayBuffer(e)}async _readChunk(e,t){let i=t?e+t-1:void 0,n={};(e||i)&&(n.range="bytes=".concat([e,i].join("-")));let s=await fetch(this.input,{headers:n}),r=await s.arrayBuffer(),a=r.byteLength;if(416!==s.status)return a!==t&&(this.size=e+a),this.set(r,e,!0)}});U.set("blob",class extends fe{async readWhole(){this.chunked=!1;let e=await H(this.input);this._swapArrayBuffer(e)}readChunked(){return this.chunked=!0,this.size=this.input.size,super.readChunked()}async _readChunk(e,t){let i=t?e+t:void 0,n=this.input.slice(e,i),s=await H(n);return this.set(s,e,!0)}});v.set("tiff",class extends _{extendOptions(e){let{ifd0:t,xmp:i,iptc:n,icc:s}=e;i.enabled&&t.deps.add(700),n.enabled&&t.deps.add(33723),s.enabled&&t.deps.add(34675),t.finalizeFilters()}async parse(){let{tiff:e,xmp:t,iptc:i,icc:n}=this.options;if(e.enabled||t.enabled||i.enabled||n.enabled){let e={start:0,type:"tiff"},t=await this.ensureSegmentChunk(e);if(void 0===t)throw u("Couldn't read chunk");this.createParser("tiff",t),this.parsers.tiff.parseHeader(),await this.parsers.tiff.parseIfd0Block(),this.adaptTiffPropAsSegment("xmp"),this.adaptTiffPropAsSegment("iptc"),this.adaptTiffPropAsSegment("icc")}}adaptTiffPropAsSegment(e){if(this.parsers.tiff[e]){let t=this.parsers.tiff[e],i=M.from(t);this.options[e].enabled&&this.createParser(e,i)}}});class pe extends _{parseBoxes(e=0){let t=[];for(;e<this.file.byteLength-4;){let i=this.parseBoxHead(e);if(t.push(i),0===i.length)break;e+=i.length}return t}parseSubBoxes(e){e.boxes=this.parseBoxes(e.start)}findBox(e,t){return void 0===e.boxes&&this.parseSubBoxes(e),e.boxes.find(e=>e.kind===t)}parseBoxHead(e){let t=this.file.getUint32(e),i=this.file.getString(e+4,4),n=e+8;return 1===t&&(t=this.file.getUint64(e+8),n+=8),{offset:e,length:t,kind:i,start:n}}parseBoxFullHead(e){let t=this.file.getUint32(e.start);e.version=t>>24,e.start+=4}}v.set("heic",class extends pe{async parse(){var e=this.file.getUint32(0);let t=this.parseBoxHead(e);await this.file.ensureChunk(t.offset,t.length),this.parseBoxFullHead(t),this.parseSubBoxes(t),this.options.icc.enabled&&await this.findIcc(t),this.options.tiff.enabled&&await this.findExif(t)}async registerSegment(e,t,i){await this.file.ensureChunk(t,i);let n=this.file.subarray(t,i);this.createParser(e,n)}async findIcc(e){let t=this.findBox(e,"iprp");if(void 0===t)return;let i=this.findBox(t,"ipco");if(void 0===i)return;let n=this.findBox(i,"colr");void 0!==n&&await this.registerSegment("icc",n.offset+12,n.length)}async findExif(e){let t=this.findBox(e,"iinf");if(void 0===t)return;let i=this.findBox(e,"iloc");if(void 0===i)return;let n=this.findExifLocIdInIinf(t),s=this.findExtentInIloc(i,n);if(void 0===s)return;let[r,a]=s;await this.file.ensureChunk(r,a);let o=4+this.file.getUint32(r);r+=o,a-=o,await this.registerSegment("tiff",r,a)}findExifLocIdInIinf(e){this.parseBoxFullHead(e);let t,i,n,s,r=e.start,a=this.file.getUint16(r);for(r+=2;a--;){if(t=this.parseBoxHead(r),this.parseBoxFullHead(t),i=t.start,t.version>=2&&(n=3===t.version?4:2,s=this.file.getString(i+n+2,4),"Exif"===s))return this.file.getUintBytes(i,n);r+=t.length}}get8bits(e){let t=this.file.getUint8(e);return[t>>4,15&t]}findExtentInIloc(e,t){this.parseBoxFullHead(e);let i=e.start,[n,s]=this.get8bits(i++),[r,a]=this.get8bits(i++),o=2===e.version?4:2,l=1===e.version||2===e.version?2:0,h=a+n+s,u=2===e.version?4:2,c=this.file.getUintBytes(i,u);for(i+=u;c--;){let e=this.file.getUintBytes(i,o);i+=o+l+2+r;let u=this.file.getUint16(i);if(i+=2,e===t)return u>1&&console.warn("ILOC box has more than one extent but we're only processing one\nPlease create an issue at https://github.com/MikeKovarik/exifr with this file"),[this.file.getUintBytes(i+a,n),this.file.getUintBytes(i+a+n,s)];i+=u*h}}});class ge extends J{static canHandle(e,t){return 224===e.getUint8(t+1)&&1246120262===e.getUint32(t+4)&&0===e.getUint8(t+8)}parse(){return{JFIFVersion:this.chunk.getUint16(0),ResolutionUnit:this.chunk.getUint8(2),XResolution:this.chunk.getUint16(3),YResolution:this.chunk.getUint16(5),ThumbnailWidth:this.chunk.getUint8(7),ThumbnailHeight:this.chunk.getUint8(8)}}static prettify(e){let t=e.JFIFVersion;return e.JFIFVersion=((65280&t)>>8).toString(16)+"."+(255&t).toString(16).padStart(2,"0"),e.ResolutionUnit=2===e.ResolutionUnit?"cm":1===e.ResolutionUnit?"inches":e.ResolutionUnit,e}}e(ge,"type","jfif"),e(ge,"headerLength",9),L.set("jfif",ge);class me extends J{static canHandle(e,t){return 237===e.getUint8(t+1)&&"Photoshop"===e.getString(t+4,9)}static headerLength(e,t,i){for(let s=0;s<i;s++)if(this.isIptcSegmentHead(e,t+s)){var n=e.getUint8(t+s+7);return n%2!=0&&(n+=1),0===n&&(n=4),s+8+n}}static isIptcSegmentHead(e,t){return 56===e.getUint8(t)&&66===e.getUint8(t+1)&&73===e.getUint8(t+2)&&77===e.getUint8(t+3)&&4===e.getUint8(t+4)&&4===e.getUint8(t+5)}parse(){let e=this.output={},t=this.chunk.byteLength;for(let i=0;i<t;i++)if(28===this.chunk.getUint8(i)&&2===this.chunk.getUint8(i+1)){let t=this.chunk.getUint16(i+3),n=this.chunk.getUint8(i+2),s=this.chunk.getString(i+5,t);e[n]=this.setValueOrArrayOfValues(s,e[n])}return this.translate(),this.output}setValueOrArrayOfValues(e,t){return void 0!==t?t instanceof Array?(t.push(e),t):[t,e]:e}}e(me,"type","iptc"),e(me,"translateValues",!1),e(me,"reviveValues",!1),L.set("iptc",me);class Se extends J{static canHandle(e,t){return 226===e.getUint8(t+1)&&1229144927===e.getUint32(t+4)}static findPosition(e,t){let i=super.findPosition(e,t);return i.chunkNumber=e.getUint8(t+16),i.chunkCount=e.getUint8(t+17),i.multiSegment=i.chunkCount>1,i}parse(){return this.output={},this.parseHeader(),this.parseTags(),this.translate(),this.output}parseHeader(){let e=this.output;if(this.chunk.byteLength<84)throw u("ICC header is too short");for(let[t,i]of Object.entries(Ce)){t=parseInt(t,10);let n=i(this.chunk,t);"\0\0\0\0"!==n&&(e[t]=n)}}parseTags(){let e,t,i,n,s,r=this.output,a=this.chunk.getUint32(128),o=132,l=this.chunk.byteLength;for(;a--;){if(e=this.chunk.getString(o,4),t=this.chunk.getUint32(o+4),i=this.chunk.getUint32(o+8),n=this.chunk.getString(t,4),t+i>l)return void console.warn("reached the end of the first ICC chunk. Enable options.tiff.multiSegment to read all ICC segments.");s=this.parseTag(n,t,i),void 0!==s&&"\0\0\0\0"!==s&&(r[e]=s),o+=12}}parseTag(e,t,i){switch(e){case"desc":return this.parseDesc(t);case"mluc":return this.parseMluc(t);case"text":return this.parseText(t,i);case"sig ":return this.parseSig(t)}if(!(t+i>this.chunk.byteLength))return this.chunk.getUint8Array(t,i)}parseDesc(e){let t=this.chunk.getUint32(e+8)-1;return this.chunk.getString(e+12,t).trim()}parseText(e,t){return this.chunk.getString(e+8,t-15).trim()}parseSig(e){return this.chunk.getString(e+8,4).trim()}parseMluc(e){let{chunk:t}=this,i=t.getUint32(e+8),n=t.getUint32(e+12),s=e+16,r=[];for(let a=0;a<i;a++){let i=t.getString(s+0,2),a=t.getString(s+2,2),o=t.getUint32(s+4),l=t.getUint32(s+8)+e,h=Ie(t.getUnicodeString(l,o));r.push({lang:i,country:a,text:h}),s+=n}return 1===i?r[0].text:r}translateValue(e,t){if(t)return"string"==typeof e?t[e]||t[e.toLowerCase()]||e:t[e]||e}}e(Se,"type","icc"),e(Se,"headerLength",18);const Ce={4:ye,8:function(e,t){return[e.getUint8(t),e.getUint8(t+1)>>4,e.getUint8(t+1)%16].map(e=>e.toString(10)).join(".")},12:ye,16:ye,20:ye,24:function(e,t){const i=e.getUint16(t),n=e.getUint16(t+2)-1,s=e.getUint16(t+4),r=e.getUint16(t+6),a=e.getUint16(t+8),o=e.getUint16(t+10);return new Date(Date.UTC(i,n,s,r,a,o))},36:ye,40:ye,48:ye,52:ye,64:(e,t)=>e.getUint32(t),80:ye};function ye(e,t){return e.getString(t,4).trim()}function Ie(e){for(;e.endsWith("\0");)e=e.slice(0,-1);return e}L.set("icc",Se);class be extends J{static canHandle(e,t){return 225===e.getUint8(t+1)&&1752462448===e.getUint32(t+4)}parse(){let e=this.chunk.getString(),t=e.indexOf("<"),i=e.lastIndexOf(">")+1;return e=e.slice(t,i).trim(),e.startsWith("<?xpacket")&&(t=e.indexOf(">")+1,i=e.lastIndexOf("<?xpacket"),e=e.slice(t,i).trim()),this.parseXml?this.parseXml(e):e}}e(be,"type","xmp"),L.set("xmp",be),i.interop={1:"InteropIndex",2:"InteropVersion",4096:"RelatedImageFileFormat",4097:"RelatedImageWidth",4098:"RelatedImageHeight"},Object.assign(i.ifd0,{33920:"IntergraphMatrix",33922:"ModelTiePoint",34118:"SEMInfo",34735:"GeoTiffDirectory",34736:"GeoTiffDoubleParams",34737:"GeoTiffAsciiParams",50341:"PrintIM",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50781:"RawDataUniqueID",50827:"OriginalRawFileName",50828:"OriginalRawFileData",50831:"AsShotICCProfile",50832:"AsShotPreProfileMatrix",50833:"CurrentICCProfile",50834:"CurrentPreProfileMatrix",50879:"ColorimetricReference",50885:"SRawType",50898:"PanasonicTitle",50899:"PanasonicTitle2",50931:"CameraCalibrationSig",50932:"ProfileCalibrationSig",50933:"ProfileIFD",50934:"AsShotProfileName",50936:"ProfileName",50937:"ProfileHueSatMapDims",50938:"ProfileHueSatMapData1",50939:"ProfileHueSatMapData2",50940:"ProfileToneCurve",50941:"ProfileEmbedPolicy",50942:"ProfileCopyright",50964:"ForwardMatrix1",50965:"ForwardMatrix2",50966:"PreviewApplicationName",50967:"PreviewApplicationVersion",50968:"PreviewSettingsName",50969:"PreviewSettingsDigest",50970:"PreviewColorSpace",50971:"PreviewDateTime",50972:"RawImageDigest",50973:"OriginalRawFileDigest",50981:"ProfileLookTableDims",50982:"ProfileLookTableData",51043:"TimeCodes",51044:"FrameRate",51058:"TStop",51081:"ReelName",51089:"OriginalDefaultFinalSize",51090:"OriginalBestQualitySize",51091:"OriginalDefaultCropSize",51105:"CameraLabel",51107:"ProfileHueSatMapEncoding",51108:"ProfileLookTableEncoding",51109:"BaselineExposureOffset",51110:"DefaultBlackRender",51111:"NewRawImageDigest",51112:"RawToPreviewGain"});let Pe={273:"StripOffsets",279:"StripByteCounts",288:"FreeOffsets",289:"FreeByteCounts",291:"GrayResponseCurve",292:"T4Options",293:"T6Options",300:"ColorResponseUnit",320:"ColorMap",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFD",333:"InkNames",334:"NumberofInks",336:"DotRange",338:"ExtraSamples",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",435:"T82Options",437:"JPEGTables",512:"JPEGProc",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",559:"StripRowCounts",999:"USPTOMiscellaneous",18247:"XP_DIP_XML",18248:"StitchInfo",28672:"SonyRawFileType",28688:"SonyToneCurve",28721:"VignettingCorrection",28722:"VignettingCorrParams",28724:"ChromaticAberrationCorrection",28725:"ChromaticAberrationCorrParams",28726:"DistortionCorrection",28727:"DistortionCorrParams",29895:"SonyCropTopLeft",29896:"SonyCropSize",32781:"ImageID",32931:"WangTag1",32932:"WangAnnotation",32933:"WangTag3",32934:"WangTag4",32953:"ImageReferencePoints",32954:"RegionXformTackPoint",32955:"WarpQuadrilateral",32956:"AffineTransformMat",32995:"Matteing",32996:"DataType",32997:"ImageDepth",32998:"TileDepth",33300:"ImageFullWidth",33301:"ImageFullHeight",33302:"TextureFormat",33303:"WrapModes",33304:"FovCot",33305:"MatrixWorldToScreen",33306:"MatrixWorldToCamera",33405:"Model2",33421:"CFARepeatPatternDim",33422:"CFAPattern2",33423:"BatteryLevel",33424:"KodakIFD",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33589:"AdventScale",33590:"AdventRevision",33628:"UIC1Tag",33629:"UIC2Tag",33630:"UIC3Tag",33631:"UIC4Tag",33918:"IntergraphPacketData",33919:"IntergraphFlagRegisters",33921:"INGRReserved",34016:"Site",34017:"ColorSequence",34018:"IT8Header",34019:"RasterPadding",34020:"BitsPerRunLength",34021:"BitsPerExtendedRunLength",34022:"ColorTable",34023:"ImageColorIndicator",34024:"BackgroundColorIndicator",34025:"ImageColorValue",34026:"BackgroundColorValue",34027:"PixelIntensityRange",34028:"TransparencyIndicator",34029:"ColorCharacterization",34030:"HCUsage",34031:"TrapIndicator",34032:"CMYKEquivalent",34152:"AFCP_IPTC",34232:"PixelMagicJBIGOptions",34263:"JPLCartoIFD",34306:"WB_GRGBLevels",34310:"LeafData",34687:"TIFF_FXExtensions",34688:"MultiProfiles",34689:"SharedData",34690:"T88Options",34732:"ImageLayer",34750:"JBIGOptions",34856:"Opto-ElectricConvFactor",34857:"Interlace",34908:"FaxRecvParams",34909:"FaxSubAddress",34910:"FaxRecvTime",34929:"FedexEDR",34954:"LeafSubIFD",37387:"FlashEnergy",37388:"SpatialFrequencyResponse",37389:"Noise",37390:"FocalPlaneXResolution",37391:"FocalPlaneYResolution",37392:"FocalPlaneResolutionUnit",37397:"ExposureIndex",37398:"TIFF-EPStandardID",37399:"SensingMethod",37434:"CIP3DataFile",37435:"CIP3Sheet",37436:"CIP3Side",37439:"StoNits",37679:"MSDocumentText",37680:"MSPropertySetStorage",37681:"MSDocumentTextPosition",37724:"ImageSourceData",40965:"InteropIFD",40976:"SamsungRawPointersOffset",40977:"SamsungRawPointersLength",41217:"SamsungRawByteOrder",41218:"SamsungRawUnknown",41484:"SpatialFrequencyResponse",41485:"Noise",41489:"ImageNumber",41490:"SecurityClassification",41491:"ImageHistory",41494:"TIFF-EPStandardID",41995:"DeviceSettingDescription",42112:"GDALMetadata",42113:"GDALNoData",44992:"ExpandSoftware",44993:"ExpandLens",44994:"ExpandFilm",44995:"ExpandFilterLens",44996:"ExpandScanner",44997:"ExpandFlashLamp",46275:"HasselbladRawImage",48129:"PixelFormat",48130:"Transformation",48131:"Uncompressed",48132:"ImageType",48256:"ImageWidth",48257:"ImageHeight",48258:"WidthResolution",48259:"HeightResolution",48320:"ImageOffset",48321:"ImageByteCount",48322:"AlphaOffset",48323:"AlphaByteCount",48324:"ImageDataDiscard",48325:"AlphaDataDiscard",50215:"OceScanjobDesc",50216:"OceApplicationSelector",50217:"OceIDNumber",50218:"OceImageLogic",50255:"Annotations",50459:"HasselbladExif",50547:"OriginalFileName",50560:"USPTOOriginalContentType",50656:"CR2CFAPattern",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50733:"BayerGreenSplit",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50752:"RawImageSegmentation",50780:"BestQualityScale",50784:"AliasLayerMetadata",50829:"ActiveArea",50830:"MaskedAreas",50935:"NoiseReductionApplied",50974:"SubTileBlockSize",50975:"RowInterleaveFactor",51008:"OpcodeList1",51009:"OpcodeList2",51022:"OpcodeList3",51041:"NoiseProfile",51114:"CacheVersion",51125:"DefaultUserCrop",51157:"NikonNEFInfo",65024:"KdcIFD"};Object.assign(i.ifd0,Pe),Object.assign(i.exif,Pe);let Te=n.gps={};Te[23]={M:"Magnetic North",T:"True North"},Te[25]={K:"Kilometers",M:"Miles",N:"Nautical Miles"},i.icc={4:"ProfileCMMType",8:"ProfileVersion",12:"ProfileClass",16:"ColorSpaceData",20:"ProfileConnectionSpace",24:"ProfileDateTime",36:"ProfileFileSignature",40:"PrimaryPlatform",44:"CMMFlags",48:"DeviceManufacturer",52:"DeviceModel",56:"DeviceAttributes",64:"RenderingIntent",68:"ConnectionSpaceIlluminant",80:"ProfileCreator",84:"ProfileID",Header:"ProfileHeader",MS00:"WCSProfiles",bTRC:"BlueTRC",bXYZ:"BlueMatrixColumn",bfd:"UCRBG",bkpt:"MediaBlackPoint",calt:"CalibrationDateTime",chad:"ChromaticAdaptation",chrm:"Chromaticity",ciis:"ColorimetricIntentImageState",clot:"ColorantTableOut",clro:"ColorantOrder",clrt:"ColorantTable",cprt:"ProfileCopyright",crdi:"CRDInfo",desc:"ProfileDescription",devs:"DeviceSettings",dmdd:"DeviceModelDesc",dmnd:"DeviceMfgDesc",dscm:"ProfileDescriptionML",fpce:"FocalPlaneColorimetryEstimates",gTRC:"GreenTRC",gXYZ:"GreenMatrixColumn",gamt:"Gamut",kTRC:"GrayTRC",lumi:"Luminance",meas:"Measurement",meta:"Metadata",mmod:"MakeAndModel",ncl2:"NamedColor2",ncol:"NamedColor",ndin:"NativeDisplayInfo",pre0:"Preview0",pre1:"Preview1",pre2:"Preview2",ps2i:"PS2RenderingIntent",ps2s:"PostScript2CSA",psd0:"PostScript2CRD0",psd1:"PostScript2CRD1",psd2:"PostScript2CRD2",psd3:"PostScript2CRD3",pseq:"ProfileSequenceDesc",psid:"ProfileSequenceIdentifier",psvm:"PS2CRDVMSize",rTRC:"RedTRC",rXYZ:"RedMatrixColumn",resp:"OutputResponse",rhoc:"ReflectionHardcopyOrigColorimetry",rig0:"PerceptualRenderingIntentGamut",rig2:"SaturationRenderingIntentGamut",rpoc:"ReflectionPrintOutputColorimetry",sape:"SceneAppearanceEstimates",scoe:"SceneColorimetryEstimates",scrd:"ScreeningDesc",scrn:"Screening",targ:"CharTarget",tech:"Technology",vcgt:"VideoCardGamma",view:"ViewingConditions",vued:"ViewingCondDesc",wtpt:"MediaWhitePoint"};const ke={"4d2p":"Erdt Systems",AAMA:"Aamazing Technologies",ACER:"Acer",ACLT:"Acolyte Color Research",ACTI:"Actix Sytems",ADAR:"Adara Technology",ADBE:"Adobe",ADI:"ADI Systems",AGFA:"Agfa Graphics",ALMD:"Alps Electric",ALPS:"Alps Electric",ALWN:"Alwan Color Expertise",AMTI:"Amiable Technologies",AOC:"AOC International",APAG:"Apago",APPL:"Apple Computer",AST:"AST","AT&T":"AT&T",BAEL:"BARBIERI electronic",BRCO:"Barco NV",BRKP:"Breakpoint",BROT:"Brother",BULL:"Bull",BUS:"Bus Computer Systems","C-IT":"C-Itoh",CAMR:"Intel",CANO:"Canon",CARR:"Carroll Touch",CASI:"Casio",CBUS:"Colorbus PL",CEL:"Crossfield",CELx:"Crossfield",CGS:"CGS Publishing Technologies International",CHM:"Rochester Robotics",CIGL:"Colour Imaging Group, London",CITI:"Citizen",CL00:"Candela",CLIQ:"Color IQ",CMCO:"Chromaco",CMiX:"CHROMiX",COLO:"Colorgraphic Communications",COMP:"Compaq",COMp:"Compeq/Focus Technology",CONR:"Conrac Display Products",CORD:"Cordata Technologies",CPQ:"Compaq",CPRO:"ColorPro",CRN:"Cornerstone",CTX:"CTX International",CVIS:"ColorVision",CWC:"Fujitsu Laboratories",DARI:"Darius Technology",DATA:"Dataproducts",DCP:"Dry Creek Photo",DCRC:"Digital Contents Resource Center, Chung-Ang University",DELL:"Dell Computer",DIC:"Dainippon Ink and Chemicals",DICO:"Diconix",DIGI:"Digital","DL&C":"Digital Light & Color",DPLG:"Doppelganger",DS:"Dainippon Screen",DSOL:"DOOSOL",DUPN:"DuPont",EPSO:"Epson",ESKO:"Esko-Graphics",ETRI:"Electronics and Telecommunications Research Institute",EVER:"Everex Systems",EXAC:"ExactCODE",Eizo:"Eizo",FALC:"Falco Data Products",FF:"Fuji Photo Film",FFEI:"FujiFilm Electronic Imaging",FNRD:"Fnord Software",FORA:"Fora",FORE:"Forefront Technology",FP:"Fujitsu",FPA:"WayTech Development",FUJI:"Fujitsu",FX:"Fuji Xerox",GCC:"GCC Technologies",GGSL:"Global Graphics Software",GMB:"Gretagmacbeth",GMG:"GMG",GOLD:"GoldStar Technology",GOOG:"Google",GPRT:"Giantprint",GTMB:"Gretagmacbeth",GVC:"WayTech Development",GW2K:"Sony",HCI:"HCI",HDM:"Heidelberger Druckmaschinen",HERM:"Hermes",HITA:"Hitachi America",HP:"Hewlett-Packard",HTC:"Hitachi",HiTi:"HiTi Digital",IBM:"IBM",IDNT:"Scitex",IEC:"Hewlett-Packard",IIYA:"Iiyama North America",IKEG:"Ikegami Electronics",IMAG:"Image Systems",IMI:"Ingram Micro",INTC:"Intel",INTL:"N/A (INTL)",INTR:"Intra Electronics",IOCO:"Iocomm International Technology",IPS:"InfoPrint Solutions Company",IRIS:"Scitex",ISL:"Ichikawa Soft Laboratory",ITNL:"N/A (ITNL)",IVM:"IVM",IWAT:"Iwatsu Electric",Idnt:"Scitex",Inca:"Inca Digital Printers",Iris:"Scitex",JPEG:"Joint Photographic Experts Group",JSFT:"Jetsoft Development",JVC:"JVC Information Products",KART:"Scitex",KFC:"KFC Computek Components",KLH:"KLH Computers",KMHD:"Konica Minolta",KNCA:"Konica",KODA:"Kodak",KYOC:"Kyocera",Kart:"Scitex",LCAG:"Leica",LCCD:"Leeds Colour",LDAK:"Left Dakota",LEAD:"Leading Technology",LEXM:"Lexmark International",LINK:"Link Computer",LINO:"Linotronic",LITE:"Lite-On",Leaf:"Leaf",Lino:"Linotronic",MAGC:"Mag Computronic",MAGI:"MAG Innovision",MANN:"Mannesmann",MICN:"Micron Technology",MICR:"Microtek",MICV:"Microvitec",MINO:"Minolta",MITS:"Mitsubishi Electronics America",MITs:"Mitsuba",MNLT:"Minolta",MODG:"Modgraph",MONI:"Monitronix",MONS:"Monaco Systems",MORS:"Morse Technology",MOTI:"Motive Systems",MSFT:"Microsoft",MUTO:"MUTOH INDUSTRIES",Mits:"Mitsubishi Electric",NANA:"NANAO",NEC:"NEC",NEXP:"NexPress Solutions",NISS:"Nissei Sangyo America",NKON:"Nikon",NONE:"none",OCE:"Oce Technologies",OCEC:"OceColor",OKI:"Oki",OKID:"Okidata",OKIP:"Okidata",OLIV:"Olivetti",OLYM:"Olympus",ONYX:"Onyx Graphics",OPTI:"Optiquest",PACK:"Packard Bell",PANA:"Matsushita Electric Industrial",PANT:"Pantone",PBN:"Packard Bell",PFU:"PFU",PHIL:"Philips Consumer Electronics",PNTX:"HOYA",POne:"Phase One A/S",PREM:"Premier Computer Innovations",PRIN:"Princeton Graphic Systems",PRIP:"Princeton Publishing Labs",QLUX:"Hong Kong",QMS:"QMS",QPCD:"QPcard AB",QUAD:"QuadLaser",QUME:"Qume",RADI:"Radius",RDDx:"Integrated Color Solutions",RDG:"Roland DG",REDM:"REDMS Group",RELI:"Relisys",RGMS:"Rolf Gierling Multitools",RICO:"Ricoh",RNLD:"Edmund Ronald",ROYA:"Royal",RPC:"Ricoh Printing Systems",RTL:"Royal Information Electronics",SAMP:"Sampo",SAMS:"Samsung",SANT:"Jaime Santana Pomares",SCIT:"Scitex",SCRN:"Dainippon Screen",SDP:"Scitex",SEC:"Samsung",SEIK:"Seiko Instruments",SEIk:"Seikosha",SGUY:"ScanGuy.com",SHAR:"Sharp Laboratories",SICC:"International Color Consortium",SONY:"Sony",SPCL:"SpectraCal",STAR:"Star",STC:"Sampo Technology",Scit:"Scitex",Sdp:"Scitex",Sony:"Sony",TALO:"Talon Technology",TAND:"Tandy",TATU:"Tatung",TAXA:"TAXAN America",TDS:"Tokyo Denshi Sekei",TECO:"TECO Information Systems",TEGR:"Tegra",TEKT:"Tektronix",TI:"Texas Instruments",TMKR:"TypeMaker",TOSB:"Toshiba",TOSH:"Toshiba",TOTK:"TOTOKU ELECTRIC",TRIU:"Triumph",TSBT:"Toshiba",TTX:"TTX Computer Products",TVM:"TVM Professional Monitor",TW:"TW Casper",ULSX:"Ulead Systems",UNIS:"Unisys",UTZF:"Utz Fehlau & Sohn",VARI:"Varityper",VIEW:"Viewsonic",VISL:"Visual communication",VIVO:"Vivo Mobile Communication",WANG:"Wang",WLBR:"Wilbur Imaging",WTG2:"Ware To Go",WYSE:"WYSE Technology",XERX:"Xerox",XRIT:"X-Rite",ZRAN:"Zoran",Zebr:"Zebra Technologies",appl:"Apple Computer",bICC:"basICColor",berg:"bergdesign",ceyd:"Integrated Color Solutions",clsp:"MacDermid ColorSpan",ds:"Dainippon Screen",dupn:"DuPont",ffei:"FujiFilm Electronic Imaging",flux:"FluxData",iris:"Scitex",kart:"Scitex",lcms:"Little CMS",lino:"Linotronic",none:"none",ob4d:"Erdt Systems",obic:"Medigraph",quby:"Qubyx Sarl",scit:"Scitex",scrn:"Dainippon Screen",sdp:"Scitex",siwi:"SIWI GRAFIKA",yxym:"YxyMaster"},we={scnr:"Scanner",mntr:"Monitor",prtr:"Printer",link:"Device Link",abst:"Abstract",spac:"Color Space Conversion Profile",nmcl:"Named Color",cenc:"ColorEncodingSpace profile",mid:"MultiplexIdentification profile",mlnk:"MultiplexLink profile",mvis:"MultiplexVisualization profile",nkpf:"Nikon Input Device Profile (NON-STANDARD!)"};n.icc={4:ke,12:we,40:Object.assign({},ke,we),48:ke,80:ke,64:{0:"Perceptual",1:"Relative Colorimetric",2:"Saturation",3:"Absolute Colorimetric"},tech:{amd:"Active Matrix Display",crt:"Cathode Ray Tube Display",kpcd:"Photo CD",pmd:"Passive Matrix Display",dcam:"Digital Camera",dcpj:"Digital Cinema Projector",dmpc:"Digital Motion Picture Camera",dsub:"Dye Sublimation Printer",epho:"Electrophotographic Printer",esta:"Electrostatic Printer",flex:"Flexography",fprn:"Film Writer",fscn:"Film Scanner",grav:"Gravure",ijet:"Ink Jet Printer",imgs:"Photo Image Setter",mpfr:"Motion Picture Film Recorder",mpfs:"Motion Picture Film Scanner",offs:"Offset Lithography",pjtv:"Projection Television",rpho:"Photographic Paper Printer",rscn:"Reflective Scanner",silk:"Silkscreen",twax:"Thermal Wax Printer",vidc:"Video Camera",vidm:"Video Monitor"}},i.iptc={0:"ApplicationRecordVersion",3:"ObjectTypeReference",4:"ObjectAttributeReference",5:"ObjectName",7:"EditStatus",8:"EditorialUpdate",10:"Urgency",12:"SubjectReference",15:"Category",20:"SupplementalCategories",22:"FixtureIdentifier",25:"Keywords",26:"ContentLocationCode",27:"ContentLocationName",30:"ReleaseDate",35:"ReleaseTime",37:"ExpirationDate",38:"ExpirationTime",40:"SpecialInstructions",42:"ActionAdvised",45:"ReferenceService",47:"ReferenceDate",50:"ReferenceNumber",55:"DateCreated",60:"TimeCreated",62:"DigitalCreationDate",63:"DigitalCreationTime",65:"OriginatingProgram",70:"ProgramVersion",75:"ObjectCycle",80:"Byline",85:"BylineTitle",90:"City",92:"Sublocation",95:"State",100:"CountryCode",101:"Country",103:"OriginalTransmissionReference",105:"Headline",110:"Credit",115:"Source",116:"CopyrightNotice",118:"Contact",120:"Caption",121:"LocalCaption",122:"Writer",125:"RasterizedCaption",130:"ImageType",131:"ImageOrientation",135:"LanguageIdentifier",150:"AudioType",151:"AudioSamplingRate",152:"AudioSamplingResolution",153:"AudioDuration",154:"AudioOutcue",184:"JobID",185:"MasterDocumentID",186:"ShortDocumentID",187:"UniqueDocumentID",188:"OwnerID",200:"ObjectPreviewFileFormat",201:"ObjectPreviewFileVersion",202:"ObjectPreviewData",221:"Prefs",225:"ClassifyState",228:"SimilarityIndex",230:"DocumentNotes",231:"DocumentHistory",232:"ExifCameraInfo",255:"CatalogSets"},n.iptc={10:{0:"0 (reserved)",1:"1 (most urgent)",2:"2",3:"3",4:"4",5:"5 (normal urgency)",6:"6",7:"7",8:"8 (least urgent)",9:"9 (user-defined priority)"},75:{a:"Morning",b:"Both Morning and Evening",p:"Evening"},131:{L:"Landscape",P:"Portrait",S:"Square"},150:{"0T":"Text Only","1A":"Mono Actuality","1C":"Mono Question and Answer Session","1M":"Mono Music","1Q":"Mono Response to a Question","1R":"Mono Raw Sound","1S":"Mono Scener","1V":"Mono Voicer","1W":"Mono Wrap","2A":"Stereo Actuality","2C":"Stereo Question and Answer Session","2M":"Stereo Music","2Q":"Stereo Response to a Question","2R":"Stereo Raw Sound","2S":"Stereo Scener","2V":"Stereo Voicer","2W":"Stereo Wrap"},200:{0:"No ObjectData",1:"IPTC-NAA Digital Newsphoto Parameter Record",2:"IPTC7901 Recommended Message Format",3:"Tagged Image File Format (Adobe/Aldus Image data)",4:"Illustrator (Adobe Graphics data)",5:"AppleSingle (Apple Computer Inc)",6:"NAA 89-3 (ANPA 1312)",7:"MacBinary II",8:"IPTC Unstructured Character Oriented File Format (UCOFF)",9:"United Press International ANPA 1312 variant",10:"United Press International Down-Load Message",11:"JPEG File Interchange (JFIF)",12:"Photo-CD Image-Pac (Eastman Kodak)",13:"Bit Mapped Graphics File [.BMP] (Microsoft)",14:"Digital Audio File [.WAV] (Microsoft & Creative Labs)",15:"Audio plus Moving Video [.AVI] (Microsoft)",16:"PC DOS/Windows Executable Files [.COM][.EXE]",17:"Compressed Binary File [.ZIP] (PKWare Inc)",18:"Audio Interchange File Format AIFF (Apple Computer Inc)",19:"RIFF Wave (Microsoft Corporation)",20:"Freehand (Macromedia/Aldus)",21:"Hypertext Markup Language [.HTML] (The Internet Society)",22:"MPEG 2 Audio Layer 2 (Musicom), ISO/IEC",23:"MPEG 2 Audio Layer 3, ISO/IEC",24:"Portable Document File [.PDF] Adobe",25:"News Industry Text Format (NITF)",26:"Tape Archive [.TAR]",27:"Tidningarnas Telegrambyra NITF version (TTNITF DTD)",28:"Ritzaus Bureau NITF version (RBNITF DTD)",29:"Corel Draw [.CDR]"}};export{z as Exifr,P as Options,v as fileParsers,U as fileReaders,X as gps,W as parse,L as segmentParsers,i as tagKeys,s as tagRevivers,n as tagValues,j as thumbnail,K as thumbnailUrl};
